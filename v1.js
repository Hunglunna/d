// === CONFIGURATION ===
const TOKEN = '8017791851:AAEBpRUQwoY4-FHHJRM-f7baYgdo6hpDwaw';
const SHEET_ID = '1YER6PexGeD-2NlTS0JyHj-9yiukDdEqQC-WVcZ8-kh8';
const SHEET_NAME_USERS = 'users';
const SHEET_NAME_ATTENDANCE = 'attendance';
const SHEET_NAME_SCHEDULE = 'schedule';
const SHEET_NAME_REMARKS = 'remarks';
const SHEET_NAME_LOCATION = 'checkin_location'; // Sheet ƒë·ªÉ l∆∞u l·ªãch s·ª≠ v·ªã tr√≠

// === SHIFT DEFINITIONS ===
const SHIFT_DEFINITIONS = {
  '1': { start: '06:00', end: '14:00' },
  '2': { start: '14:00', end: '22:00' },
  'TS': hours => ({ start: '06:00', end: addHoursToTime('06:00', hours) }),
  'TT': hours => ({ start: subtractHoursFromTime('22:00', hours), end: '22:00' }),
};

function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents);
    if (!data.message) return;

    const msg = data.message;
    const chatId = msg.chat.id;
    const userId = msg.from.id.toString();
    const firstName = msg.from.first_name || '';
    const text = msg.text ? msg.text.trim() : '';
    const location = msg.location;

    const ss = SpreadsheetApp.openById(SHEET_ID);
    const sheetUsers = ss.getSheetByName(SHEET_NAME_USERS);
    const userInfo = getUserInfo(sheetUsers, userId);

    // === ADMIN COMMANDS ===
    if (text === '/help') {
      let helpText = `*H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG BOT CH·∫§M C√îNG*\n\n` +
        `C√°c l·ªánh c∆° b·∫£n cho ng∆∞·ªùi d√πng:\n` +
        '/start - B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng bot\n' +
        '/checkin - ƒêi·ªÉm danh (checkin)\n' +
        '/checkout - K·∫øt th√∫c ca l√†m (checkout)\n' +
        '/today - Xem ca h√¥m nay\n' +
        '/tomorrow - Xem ca ng√†y mai\n' +
        '/viewremarks - Xem nh·∫≠n x√©t t·ª´ admin\n\n';
      if (userInfo?.isAdmin) {
        helpText += `*L·ªánh cho admin:*\n` +
          '/setlocation - C√†i ƒë·∫∑t v·ªã tr√≠ ch·∫•m c√¥ng\n' +
          '/schedule <t√™n> <ca> | ... - L√™n l·ªãch ca cho nh√¢n vi√™n\n' +
          '/viewlogs - Xem logs ch·∫•m c√¥ng h√¥m nay\n' +
          '/viewschedule <dd> - Xem l·ªãch ph√¢n ca ng√†y dd\n' +
          '/remark <ten> <n·ªôi dung> trong ngo·∫∑c k√©p - G·ª≠i nh·∫≠n x√©t cho nh√¢n vi√™n\n' +
          '/manageusers - Qu·∫£n l√Ω nh√¢n vi√™n\n';
      }
      sendMessage(chatId, helpText);
      return;
    }

    // === ADMIN SET LOCATION ===
    if (text === '/setlocation' && userInfo?.isAdmin) {
      PropertiesService.getScriptProperties().setProperty(`WAITING_ADMIN_LOCATION_${userId}`, 'true');
      sendMessage(chatId, `üìç Vui l√≤ng g·ª≠i v·ªã tr√≠ ƒë·ªÉ thi·∫øt l·∫≠p geo-fence.`);
      return;
    }

    if (
      location &&
      PropertiesService.getScriptProperties().getProperty(`WAITING_ADMIN_LOCATION_${userId}`) === 'true' &&
      userInfo?.isAdmin
    ) {
      PropertiesService.getScriptProperties().deleteProperty(`WAITING_ADMIN_LOCATION_${userId}`);
      PropertiesService.getScriptProperties().setProperty('CHECKIN_LAT', location.latitude.toString());
      PropertiesService.getScriptProperties().setProperty('CHECKIN_LON', location.longitude.toString());
      // L∆∞u v√†o sheet l·ªãch s·ª≠ v·ªã tr√≠
      getOrCreateSheet(SHEET_NAME_LOCATION).appendRow([
        new Date(),
        userId,
        userInfo.name || '',
        location.latitude,
        location.longitude
      ]);
      sendMessage(chatId, `‚úÖ ƒê√£ l∆∞u ƒëi·ªÉm ch·∫•m c√¥ng t·∫°i [${location.latitude}, ${location.longitude}]`);
      return;
    }

    // --- L√™n l·ªãch ca cho nh√¢n vi√™n: l∆∞u t√™n thay v√¨ UserID ---
    if (text.startsWith('/schedule') && userInfo?.isAdmin) {
      const entries = text.slice(9).split('|').map(s => s.trim());
      const now = new Date();
      const month = String(now.getMonth() + 1).padStart(2, '0');
      const year = now.getFullYear();
      const scheduleSheet = getOrCreateSheet(SHEET_NAME_SCHEDULE);

      entries.forEach(entry => {
        const parts = entry.split(' ').filter(p => p);
        if (parts.length < 2) return;
        const name = parts[0];
        let shiftRaw = parts[1];
        let shiftCode = shiftRaw;
        let m = shiftRaw.match(/^(\d+)(TS|TT)$/i);
        if (m) shiftCode = m[2].toUpperCase() + m[1];
        else {
          m = shiftRaw.match(/^(TS|TT)(\d+)$/i);
          if (m) shiftCode = m[1].toUpperCase() + m[2];
        }
        const key = shiftCode.match(/^(\d+|TS|TT)/)[0];
        if (!SHIFT_DEFINITIONS[key] && !/^\d+-\d+$/.test(shiftRaw)) {
          sendMessage(chatId, `‚ö†Ô∏è Ca "${shiftRaw}" kh√¥ng h·ª£p l·ªá.`);
          return;
        }
        // Ki·ªÉm tra t·ªìn t·∫°i user trong sheet users
        const realName = findUserNameByName(sheetUsers, name);
        if (!realName) {
          sendMessage(chatId, `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n t√™n "${name}".`);
          return;
        }
        const dateObj = new Date(year, now.getMonth(), now.getDate() + 1);
        const day = String(dateObj.getDate()).padStart(2, '0');
        const dateStr = `${day}-${month}-${year}`;
        scheduleSheet.appendRow([realName, dateStr, shiftCode]); // L∆∞u real name
        sendMessage(chatId, `‚úÖ Th√™m ca cho ${realName} ng√†y mai (${dateStr}): ${shiftCode}`);
      });
      return;
    }

    if (text === '/viewremarks') {
  // L·∫•y userId t·ª´ d·ªØ li·ªáu Telegram (th∆∞·ªùng l√† msg.from.id)
  const userName = getUserNameById(userId);
  if (!userName) {
    sendMessage(chatId, '‚ö†Ô∏è B·∫°n ch∆∞a ƒëƒÉng k√Ω t√†i kho·∫£n!');
    return;
  }
  const remarks = getRemarksByName(userName);
  if (remarks.length === 0) {
    sendMessage(chatId, `B·∫°n ch∆∞a c√≥ nh·∫≠n x√©t n√†o.`);
    return;
  }
  let reply = `üìã Nh·∫≠n x√©t c·ªßa b·∫°n:\n`;
  remarks.forEach((row, idx) => {
    // row[1]: Time, row[2]: Remark
    const d = new Date(row[1]);
    const timeStr = `${d.getDate()}/${d.getMonth()+1}/${d.getFullYear()} ${d.getHours()}:${d.getMinutes().toString().padStart(2,"0")}`;
    reply += `\n${idx+1}. [${timeStr}] ${row[2]}`;
  });
  sendMessage(chatId, reply);
}

    if (text === '/today') {
      checkScheduleForUser(userId, chatId, 0, 'H√¥m nay');
      return;
      }
    if (text === '/tomorrow') {
      checkScheduleForUser(userId, chatId, 1, 'Ng√†y mai');
      return;
      }

    if (text === '/viewlogs' && userInfo?.isAdmin) {
      sendMessage(chatId, readTodayLogs());
      return;
    }

    if (text.startsWith('/viewschedule') && userInfo?.isAdmin) {
  const parts = text.trim().split(' ');
  const day = parts[1] ? parts[1].padStart(2, '0') : null;
  if (!day) {
    sendMessage(chatId, `‚ö†Ô∏è Vui l√≤ng nh·∫≠p ng√†y (dd). V√≠ d·ª•: /viewschedule 14`);
    return;
  }
  const now = new Date();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const year = now.getFullYear();
  const date = `${day}-${month}-${year}`;
  const result = readScheduleForDate(date);
  sendMessage(chatId, result);
  return;
}



    

   

    if (text.startsWith('/remark ')) {
  // Lo·∫°i b·ªè /remark, l·∫•y ph·∫ßn c√≤n l·∫°i
  const cmd = text.replace('/remark ', '').trim();

  // T√¨m d·∫•u c√°ch ƒë·∫ßu ti√™n, sau ƒë√≥ t√¨m d·∫•u " ƒë·∫ßu ti√™n v√† cu·ªëi c√πng
  // ho·∫∑c d√πng regex cho ti·ªán
  const match = cmd.match(/^([^\s]+)\s+"(.+)"$/);
  if (!match) {
    sendMessage(chatId, '‚ö†Ô∏è ƒê·ªãnh d·∫°ng ƒë√∫ng: /remark ten "n·ªôi dung nh·∫≠n x√©t"');
    return;
  }
  const name = match[1];
  const remarkText = match[2];

  saveRemarkByName(name, remarkText);
  sendMessage(chatId, '‚úÖ ƒê√£ l∆∞u nh·∫≠n x√©t.');
}

    if (text === '/manageusers' && userInfo?.isAdmin) {
      sendMessage(chatId, listUsers());
      return;
    }

    // === USER COMMANDS ===
    if (text === '/start') {
      handleStart(sheetUsers, chatId, userId, firstName);
      return;
    }
    if (text === '/checkin') {
      PropertiesService.getScriptProperties().setProperty(`WAITING_CHECKIN_${userId}`, 'true');
      requestLocation(chatId);
      return;
    }
    if (text === '/checkout') {
      handleCheckout(chatId, userId);
      return;
    }
    

    // Name registration
    if (PropertiesService.getScriptProperties().getProperty(`WAITING_NAME_${userId}`) === 'true') {
      registerName(sheetUsers, chatId, userId, text.trim());
      return;
    }

    // Handle check-in location cho user
    if (location) {
      handleLocation(chatId, userId, firstName, location);
      return;
    }
  } catch (error) {
    Logger.log('Error in doPost: ' + error);
  }
}

// --- HELPER FUNCTIONS ---
function handleStart(sheet, chatId, userId, firstName) {
  const info = getUserInfo(sheet, userId);
  if (info) {
    sendMessage(chatId, `üëã Xin ch√†o ${info.isAdmin ? 'admin' : 'nv'} ${info.name}`);
  } else {
    const isAdmin = checkIfAdmin(userId);
    if (isAdmin) {
      sheet.appendRow([userId, firstName, 'admin']);
      sendMessage(chatId, `üëã Ch√†o admin`);
    } else {
      PropertiesService.getScriptProperties().setProperty(`WAITING_NAME_${userId}`, 'true');
      sendMessage(chatId, `üìõ Nh·∫≠p h·ªç t√™n:`);
    }
  }
}
function getUserNameById(uid) {
  const usersSheet = getOrCreateSheet(SHEET_NAME_USERS);
  const usersData = usersSheet.getDataRange().getValues();
  for (let i = 1; i < usersData.length; i++) {
    if (String(usersData[i][0]).trim() === String(uid).trim()) {
      return String(usersData[i][1]).trim();
    }
  }
  return null;
}

// H√†m l·∫•y t·∫•t c·∫£ remark theo t√™n
function getRemarksByName(name) {
  const remarksSheet = getOrCreateSheet(SHEET_NAME_REMARKS);
  const remarksData = remarksSheet.getDataRange().getValues();
  const result = [];
  for (let i = 1; i < remarksData.length; i++) { // B·ªè d√≤ng header
    if (String(remarksData[i][0]).trim().toLowerCase() === name.trim().toLowerCase()) {
      result.push(remarksData[i]);
    }
  }
  return result;
}
function readScheduleForDate(dateStr) {
  const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName('schedule');
  const data = sheet.getDataRange().getValues();
  let result = `üìÖ L·ªãch l√†m vi·ªác ng√†y ${dateStr}:\n`;
  let found = false;
  for (let i = 1; i < data.length; i++) {
    // C·ªôt 0: T√™n, c·ªôt 1: Ng√†y, c·ªôt 2: Ca
    const scheduleDate = formatSheetDate(data[i][1]);
    if (scheduleDate === dateStr) {
      result += `- ${data[i][0]}: ${data[i][2]}\n`;
      found = true;
    }
  }
  if (!found) result += 'Kh√¥ng c√≥ ai l√†m ca trong ng√†y n√†y.';
  return result.trim();
}

/**
 * H√†m ph·ª• tr·ª£ ƒë·ªãnh d·∫°ng ng√†y sheet schedule
 */
function formatSheetDate(dateValue) {
  if (dateValue instanceof Date && !isNaN(dateValue)) {
    const day = String(dateValue.getDate()).padStart(2, '0');
    const month = String(dateValue.getMonth() + 1).padStart(2, '0');
    const year = dateValue.getFullYear();
    return `${day}-${month}-${year}`;
  } else if (typeof dateValue === "number") {
    const date = new Date(Math.round((dateValue - 25569) * 86400 * 1000));
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}-${month}-${year}`;
  } else {
    return String(dateValue || '').trim();
  }
}
function registerName(sheet, chatId, userId, name) {
  if (name.length < 3) {
    sendMessage(chatId, `‚ö†Ô∏è T√™n >=3 k√Ω t·ª±`);
    return;
  }
  sheet.appendRow([userId, name, 'user']);
  PropertiesService.getScriptProperties().deleteProperty(`WAITING_NAME_${userId}`);
  sendMessage(chatId, `‚úÖ ƒê√£ l∆∞u t√™n ${name}`);
}

function handleCheckout(chatId, userId) {
  const sheet = getOrCreateSheet(SHEET_NAME_ATTENDANCE);
  const data = sheet.getDataRange().getValues();
  const t = new Date().toDateString();
  for (let i = data.length - 1; i >= 1; i--) {
    if (String(data[i][0]) === String(userId) && new Date(data[i][2]).toDateString() === t) {
      const f = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'HH:mm:ss');
      sheet.getRange(i + 1, 7).setValue(f);
      sendMessage(chatId, `‚úÖ Checkout ${f}`);
      return;
    }
  }
  sendMessage(chatId, `‚ö†Ô∏è Ch∆∞a checkin.`);
}

// fix: t√™n l·∫•y ƒë√∫ng t·ª´ sheet users
function handleLocation(chatId, userId, firstName, loc) {
  const props = PropertiesService.getScriptProperties();
  const waiting = props.getProperty(`WAITING_CHECKIN_${userId}`);
  if (waiting === 'true') {
    props.deleteProperty(`WAITING_CHECKIN_${userId}`);

    const cLatStr = props.getProperty('CHECKIN_LAT');
    const cLonStr = props.getProperty('CHECKIN_LON');
    if (!cLatStr || !cLonStr) {
      sendMessage(chatId, `‚ö†Ô∏è H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c admin c√†i ƒë·∫∑t v·ªã tr√≠ ch·∫•m c√¥ng. Vui l√≤ng b√°o admin d√πng /setlocation!`);
      return;
    }

    const cLat = parseFloat(cLatStr);
    const cLon = parseFloat(cLonStr);
    const lat = loc.latitude, lon = loc.longitude;
    const dist = getDistanceInMeters(lat, lon, cLat, cLon);

    if (dist > 100) {
      sendMessage(chatId, `‚ö†Ô∏è B·∫°n c√°ch ƒëi·ªÉm ch·∫•m c√¥ng ${Math.round(dist)}m (quy ƒë·ªãnh <=100m)`);
      return;
    }
    // L·∫•y t√™n th·∫≠t t·ª´ sheet users
    const usersSheet = getOrCreateSheet(SHEET_NAME_USERS);
    const userInfo = getUserInfo(usersSheet, userId);
    const trueName = userInfo ? userInfo.name : firstName;

    const f = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'HH:mm:ss');
    getOrCreateSheet(SHEET_NAME_ATTENDANCE).appendRow([
      userId, trueName, new Date(), lat, lon, Math.round(dist), ''
    ]);
    sendMessage(chatId, `‚úÖ Checkin th√†nh c√¥ng l√∫c ${f}`);
  }
}



function readTodayLogs() {
  const data = getOrCreateSheet(SHEET_NAME_ATTENDANCE).getDataRange().getValues();
  const t = new Date().toDateString();
  let out = 'Logs h√¥m nay:\n';
  data.forEach(r => {
    if (new Date(r[2]).toDateString() === t)
      out += `${r[0]}-${r[1]} in ${Utilities.formatDate(new Date(r[2]), Session.getScriptTimeZone(), 'HH:mm:ss')} out ${r[6] || 'N/A'}\n`;
  });
  return out;
}

function readSchedule(date) {
  const data = getOrCreateSheet(SHEET_NAME_SCHEDULE).getDataRange().getValues();
  let out = `L·ªãch ${date}:\n`;
  data.forEach(r => {
    if (r[1] === date) out += `${r[0]}: ${r[2]}\n`;
  });
  return out;
}
/**
 * L·∫•y t√™n ng∆∞·ªùi d√πng theo userId t·ª´ sheet 'users'
 */
function getUserNameById(userId) {
  const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName('users');
  const data = sheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (String(data[i][0]).trim() === String(userId).trim()) {
      return String(data[i][1] || '').replace(/\s+/g, ' ').trim();
    }
  }
  return '';
}

/**
 * ƒê·ªãnh d·∫°ng ng√†y v·ªÅ d·∫°ng dd-mm-yyyy (d√π ƒë·∫ßu v√†o l√† Date, number, hay string)
 */
function formatSheetDate(dateValue) {
  if (dateValue instanceof Date && !isNaN(dateValue)) {
    // Tr∆∞·ªùng h·ª£p l√† Date object
    const day = String(dateValue.getDate()).padStart(2, '0');
    const month = String(dateValue.getMonth() + 1).padStart(2, '0');
    const year = dateValue.getFullYear();
    return `${day}-${month}-${year}`;
  } else if (typeof dateValue === "number") {
    // Tr∆∞·ªùng h·ª£p l√† s·ªë serial c·ªßa Google Sheets
    const date = new Date(Math.round((dateValue - 25569) * 86400 * 1000)); // 25569 l√† s·ªë ng√†y t·ª´ 01/01/1900 ƒë·∫øn 01/01/1970
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}-${month}-${year}`;
  } else {
    // Tr∆∞·ªùng h·ª£p l√† string
    return String(dateValue || '').trim();
  }
}

/**
 * Ki·ªÉm tra ca cho userId v√†o ng√†y offsetDay (0=h√¥m nay, 1=ng√†y mai)
 */
function checkScheduleForUser(userId, chatId, offsetDay, label) {
  try {
    // T√≠nh ng√†y c·∫ßn ki·ªÉm tra
    const dateObj = new Date();
    dateObj.setDate(dateObj.getDate() + (offsetDay || 0));
    const day = String(dateObj.getDate()).padStart(2, '0');
    const month = String(dateObj.getMonth() + 1).padStart(2, '0');
    const year = dateObj.getFullYear();
    const dateStr = `${day}-${month}-${year}`;

    // L·∫•y t√™n ng∆∞·ªùi d√πng
    const name = getUserNameById(userId);
    if (!name) {
      sendMessage(chatId, `‚ö†Ô∏è B·∫°n ch∆∞a ƒëƒÉng k√Ω t√™n.`);
      return;
    }

    // L·∫•y d·ªØ li·ªáu l·ªãch l√†m
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName('schedule');
    const data = sheet.getDataRange().getValues();
    let found = false;
    for (let i = 1; i < data.length; i++) {
      const scheduleName = String(data[i][0] || '').replace(/\s+/g, ' ').trim().toLowerCase();
      const userName = name.toLowerCase();
      const scheduleDate = formatSheetDate(data[i][1]);
      if (scheduleName === userName && scheduleDate === dateStr) {
        sendMessage(chatId, `üìÖ ${label} b·∫°n c√≥ ca: ${data[i][2]}`);
        found = true;
        break;
      }
    }
    if (!found) {
      sendMessage(chatId, `üì≠ ${label} b·∫°n kh√¥ng c√≥ ca.`);
    }
  } catch (err) {
    sendMessage(chatId, `L·ªói: ${err}`);
  }
}





function saveRemarkByName(name, text) {
  // Ki·ªÉm tra t√™n c√≥ trong sheet users kh√¥ng (c·ªôt 2, b·ªè qua hoa th∆∞·ªùng, kho·∫£ng tr·∫Øng th·ª´a)
  const usersSheet = getOrCreateSheet(SHEET_NAME_USERS);
  const usersData = usersSheet.getDataRange().getValues();
  let found = false;
  for (let i = 1; i < usersData.length; i++) {
    if (String(usersData[i][1]).trim().toLowerCase() === name.trim().toLowerCase()) {
      found = true;
      break;
    }
  }
  if (found) {
    getOrCreateSheet(SHEET_NAME_REMARKS).appendRow([name.trim(), new Date(), text]);
  } else {
    Logger.log("T√™n kh√¥ng t·ªìn t·∫°i trong danh s√°ch user!");
  }
}

function listUsers() {
  return getOrCreateSheet(SHEET_NAME_USERS).getDataRange().getValues().slice(1)
    .map(r => `${r[0]}-${r[1]}(${r[2]})`).join('\n');
}

function parseTime(s) {
  const [h, m] = s.split(':').map(Number);
  return new Date(0, 0, 0, h, m);
}

// T√¨m ƒë√∫ng t√™n t·ª´ sheet users (case-insensitive)
function findUserNameByName(sheet, name) {
  const data = sheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++)
    if ((data[i][1] || '').toLowerCase().trim() === name.toLowerCase().trim())
      return data[i][1];
  return null;
}

function getOrCreateSheet(name) {
  const ss = SpreadsheetApp.openById(SHEET_ID);
  let sh = ss.getSheetByName(name);
  if (!sh) {
    sh = ss.insertSheet(name);
    if (name === SHEET_NAME_SCHEDULE) sh.appendRow(['Name', 'Date', 'Shift']);
    if (name === SHEET_NAME_ATTENDANCE) sh.appendRow(['UserID', 'Name', 'Checkin', 'Lat', 'Lon', 'Dist', 'Checkout']);
    if (name === SHEET_NAME_REMARKS) sh.appendRow(['Name', 'Time', 'Remark']);
    if (name === SHEET_NAME_USERS) sh.appendRow(['UserID', 'Name', 'Role']);
    if (name === SHEET_NAME_LOCATION) sh.appendRow(['Time', 'AdminID', 'AdminName', 'Lat', 'Lon']);
  }
  return sh;
}

function getUserInfo(sheet, userId) {
  const data = sheet.getDataRange().getValues();
  for (let i = 1; i < data.length; i++)
    if (String(data[i][0]) === String(userId))
      return { id: data[i][0], name: data[i][1], isAdmin: (data[i][2] || '').toLowerCase() === 'admin' };
  return null;
}

function checkIfAdmin(userId) {
  // Update this list as needed
  return ['6010138579'].includes(String(userId));
}

function addHoursToTime(time, hours) {
  const [H, M] = time.split(':').map(Number);
  const result = new Date(0, 0, 0, H, M + (parseInt(hours) * 60));
  return `${String(result.getHours()).padStart(2, '0')}:${String(result.getMinutes()).padStart(2, '0')}`;
}

function subtractHoursFromTime(time, hours) {
  const [H, M] = time.split(':').map(Number);
  const result = new Date(0, 0, 0, H, M - (parseInt(hours) * 60));
  return `${String(result.getHours()).padStart(2, '0')}:${String(result.getMinutes()).padStart(2, '0')}`;
}

function getDistanceInMeters(lat1, lon1, lat2, lon2) {
  const R = 6371000, toR = x => x * Math.PI / 180;
  const dLat = toR(lat2 - lat1), dLon = toR(lon2 - lon1);
  const a = Math.sin(dLat / 2) ** 2 + Math.cos(toR(lat1)) * Math.cos(toR(lat2)) * Math.sin(dLon / 2) ** 2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

function requestLocation(chatId) {
  const payload = {
    chat_id: chatId,
    text: "üìç G·ª≠i v·ªã tr√≠:",
    reply_markup: {
      keyboard: [[{ text: "G·ª≠i v·ªã tr√≠", request_location: true }]],
      one_time_keyboard: true,
      resize_keyboard: true
    }
  };
  UrlFetchApp.fetch(`https://hung.testhungw.workers.dev/bot${TOKEN}/sendMessage`, {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload)
  });
}

function sendMessage(chatId, text) {
  UrlFetchApp.fetch(`https://hung.testhungw.workers.dev/bot${TOKEN}/sendMessage`, {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify({ chat_id: chatId, text, parse_mode: 'Markdown' })
  });
}

function setupSheets() {
  getOrCreateSheet(SHEET_NAME_USERS);
  getOrCreateSheet(SHEET_NAME_SCHEDULE);
  getOrCreateSheet(SHEET_NAME_ATTENDANCE);
  getOrCreateSheet(SHEET_NAME_REMARKS);
  getOrCreateSheet(SHEET_NAME_LOCATION); // T·∫°o sheet l∆∞u l·ªãch s·ª≠ v·ªã tr√≠ n·∫øu ch∆∞a c√≥
}
